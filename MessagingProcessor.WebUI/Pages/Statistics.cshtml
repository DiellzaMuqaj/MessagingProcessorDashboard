
@page
@inject IConfiguration Configuration
@model StatisticsModel
@{
    ViewData["Title"] = "Message Statistics";
}

<h2>Message Statistics</h2>

<!-- Filter Controls -->
<div class="d-flex justify-content-between align-items-center mt-3 mb-3">
    <label for="statusFilter" class="form-label mb-0">Filter by Status:</label>
    <select id="statusFilter" class="form-select w-auto" onchange="renderFilteredStats()">
        <option value="All">All</option>
        <option value="Sent">Sent</option>
        <option value="Failed">Failed</option>
        <option value="Pending">Pending</option>
        <option value="Retried">Retried</option>
        <option value="Processing">Processing</option>
        <option value="DeadLetter">DeadLetter</option>
    </select>
</div>

<!-- Statistics Table -->
<table class="table table-striped table-bordered">
    <thead class="table-dark">
        <tr>
            <th>Type</th>
            <th>Status</th>
            <th>Count</th>
        </tr>
    </thead>
    <tbody id="statisticsTableBody">
        <!-- Rows inserted via JS -->
    </tbody>
</table>

@section Scripts {
    <script>
        window.apiBaseUrl = "@Configuration["ApiBaseUrl"]";
        let allStatistics = [];

        async function fetchStatistics() {
            try {
                const response = await fetch(`${window.apiBaseUrl}/api/message/statistics`);
                allStatistics = await response.json();
                renderFilteredStats();
            } catch (err) {
                console.error("Error fetching statistics:", err);
            }
        }

              function renderFilteredStats() {
            const selectedStatus = document.getElementById("statusFilter").value;
            const tableBody = document.getElementById("statisticsTableBody");
            tableBody.innerHTML = "";

            const filtered = selectedStatus === "All"
                ? allStatistics
                : allStatistics.filter(s => s.status === selectedStatus);

            if (filtered.length === 0) {
                const row = `<tr>
                    <td colspan="3" class="text-center text-muted">No statistics found for "${selectedStatus}"</td>
                </tr>`;
                tableBody.innerHTML = row;
                return;
            }

            filtered.forEach(stat => {
                const row = `<tr>
                    <td>${stat.type}</td>
                    <td>${stat.status}</td>
                    <td>${stat.count}</td>
                </tr>`;
                tableBody.innerHTML += row;
            });
        }


        fetchStatistics();
        setInterval(fetchStatistics, 10000); // optional refresh
    </script>
}
