@page
@inject IConfiguration Configuration
@model StatusModel
@{
    ViewData["Title"] = "Home page";
}

<h2>Dashboard</h2>
<!-- Dashboard Cards -->
<div class="row">
    <!-- Left column with Queue Depth and Throughput stacked -->
    <div class="col-md-4 d-flex flex-column justify-content-between">
        <div class="card shadow-sm mb-3" style="height: 150px;">
            <div class="card-body d-flex flex-column justify-content-center">
                <h5 class="card-title">Queue Depth</h5>
                <h3 id="queueDepth" class="text-primary">0</h3>
            </div>
        </div>

        <div class="card shadow-sm" style="height: 150px;">
            <div class="card-body d-flex flex-column justify-content-center">
                <h5 class="card-title">Throughput (10s)</h5>
                <h3 id="throughput" class="text-success">0</h3>
            </div>
        </div>
</div>
    <!-- Right column with Error Rate chart -->
    <div class="col-md-8">
        <div class="card shadow-sm h-100">
            <div class="card-body d-flex flex-column align-items-center justify-content-center">
                <h5 class="card-title">Error Rate</h5>
                <canvas id="errorChart" style="max-width: 250px; max-height: 250px;"></canvas>
            </div>
        </div>
    </div>

</div>



<!-- Message Table -->
<div class="mt-5">
    <h4>All Messages</h4>
    <table class="table table-bordered table-hover mt-3">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Type</th>
                <th>Recipient</th>
                <th>Status</th>
                <th>Created At</th>
                <th>Retry Count</th>
            </tr>
        </thead>
        <tbody id="messageTableBody">
            <!-- Rows will be inserted by JS -->
        </tbody>
    </table>
    <div class="d-flex justify-content-between align-items-center mt-3">
        <button class="btn btn-outline-secondary" onclick="prevPage()" id="prevPageBtn">Previous</button>
        <span id="pageNumberLabel" class="fw-bold">Page 1</span>
        <button class="btn btn-outline-secondary" onclick="nextPage()" id="nextPageBtn">Next</button>
    </div>


</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    window.apiBaseUrl = "@Configuration["ApiBaseUrl"]";
    const API_BASE_URL = window.apiBaseUrl;

    let currentPage = 1;
    const pageSize = 10;
    let totalPages = 1;

    async function fetchMetrics() {
        try {
            const response = await fetch(`${API_BASE_URL}/api/metrics/summary`);
            const data = await response.json();

            document.getElementById('queueDepth').innerText = data.queueDepth;
            document.getElementById('throughput').innerText = data.throughputLast10s;

            const errorPercentage = Math.round(data.errorRate * 100);
            if (window.errorChartInstance) {
                window.errorChartInstance.data.datasets[0].data = [errorPercentage, 100 - errorPercentage];
                window.errorChartInstance.update();
            } else {
                const ctx = document.getElementById('errorChart').getContext('2d');
                window.errorChartInstance = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Errors', 'Success'],
                        datasets: [{
                            data: [errorPercentage, 100 - errorPercentage],
                            backgroundColor: ['#dc3545', '#28a745']
                        }]
                    },
                    options: { plugins: { legend: { position: 'bottom' } } }
                });
            }
        } catch (err) {
            console.error('Error fetching metrics:', err);
        }
    }


    async function fetchMessages(page = 1) {
        try {
            const response = await fetch(`${API_BASE_URL}/api/message/all?pageNumber=${page}&pageSize=${pageSize}`);
            const result = await response.json();

            const messages = result.items;
            const totalCount = result.totalCount;

            totalPages = Math.ceil(totalCount / pageSize);

            const tbody = document.getElementById('messageTableBody');
            tbody.innerHTML = '';

          if (messages.length === 0) {
        const emptyRow = `<tr>
            <td colspan="6" class="text-center text-muted">No messages found on this page.</td>
        </tr>`;
        tbody.innerHTML = emptyRow;
    } else {
        messages.forEach(msg => {
            const row = `<tr>
                <td>${msg.id}</td>
                <td>${msg.type}</td>
                <td>${msg.recipient}</td>
                <td>${msg.status}</td>
                <td>${new Date(msg.createdAt).toLocaleString()}</td>
                <td>${msg.retryCount}</td>
            </tr>`;
            tbody.innerHTML += row;
        });
    }

            currentPage = page;
            updatePaginationControls();
        } catch (err) {
            console.error('Error fetching messages:', err);
        }
    }

    function updatePaginationControls() {
        document.getElementById('pageNumberLabel').textContent = `Page ${currentPage} of ${totalPages}`;
        document.getElementById('prevPageBtn').disabled = currentPage === 1;
        document.getElementById('nextPageBtn').disabled = currentPage === totalPages;
    }

    function nextPage() {
        if (currentPage < totalPages) {
            fetchMessages(currentPage + 1);
        }
    }

    function prevPage() {
        if (currentPage > 1) {
            fetchMessages(currentPage - 1);
        }
    }


    // Initial load
    fetchMetrics();
    fetchMessages();

    setInterval(fetchMetrics, 5000);
    setInterval(() => fetchMessages(currentPage), 10000);
</script>

